{"version":3,"sources":["Component/Map.js","View/EarthQuakeList.js","App.js","index.js"],"names":["YandexMap","listEarthQuake","renderCirclies","map","elem","circleInfo","depth","circleSize","circleColor","handleCircleSize","geometry","lat","lon","options","fillColor","strokeColor","strokeOpacity","strokeWidth","eventId","query","lang","height","width","state","center","zoom","maxWidth","data","content","length","defaultState","selected","maxZoom","defaultProps","EarthQuakeList","useState","setListEarthQuake","m","lastDay","listData","setListData","fetchListFromAfad","a","formData","FormData","append","fetch","method","body","response","json","useEffect","style","padding","type","id","value","placeholder","onChange","e","target","onClick","marginLeft","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAIMA,EAAY,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eA8BXC,EAAc,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAgBE,KAAI,SAAAC,GACvC,IAAMC,EA7Be,SAACC,GACtB,IAAID,EAAa,CAAEE,WAAY,IAAKC,YAAa,KACjD,QAAQ,GACJ,KAAKF,EAAQ,EACTD,EAAa,CACTE,WAAY,IACZC,YAAa,WAEjB,MACJ,KAAKF,EAAQ,EACTD,EAAa,CACTE,WAAY,IACZC,YAAa,WAGjB,MAEJ,QACIH,EAAa,CACTE,WAAY,IACZC,YAAa,WAIzB,OAAOH,EAKYI,CAAiBL,EAAKE,OACzC,OAAO,cAAC,IAAD,CAEHI,SAAU,CAAC,EAAEN,EAAKO,KAAMP,EAAKQ,KAAMP,EAAWE,YAC9CM,QAAS,CACLC,UAAWT,EAAWG,YACtBO,YAAa,UACbC,cAAe,GACfC,YAAa,IANZb,EAAKc,YAYlB,OACI,cAAC,IAAD,CAAOC,MAAO,CACVC,KAAM,SADV,SAGI,eAAC,IAAD,CAAKC,OAAO,OAAOC,MAAM,OAAOC,MAAO,CAAEC,OAAQ,CAAC,SAAU,UAAWC,KAAM,GAA7E,UACI,cAAC,IAAD,CACIZ,QAAS,CAAEa,SAAU,KACrBC,KAAM,CAAEC,QAAQ,qBAAD,OAAuB3B,EAAe4B,OAAS,IAC9DC,aAAc,CAAEC,UAAU,KAE9B,cAAC,IAAD,CACIlB,QAAS,CAAEmB,QAAS,GADxB,SAGK9B,UAWrBF,EAAUiC,aAAe,CACrBhC,eAAgB,IAILD,QCvCAkC,EAnCQ,WAAO,IAAD,EACmBC,mBAAS,IAD5B,mBAClBlC,EADkB,KACFmC,EADE,OAEOD,mBAAS,CAAEE,EAAG,EAAGC,QAAS,IAFjC,mBAElBC,EAFkB,KAERC,EAFQ,KAInBC,EAAiB,uCAAG,8BAAAC,EAAA,6DAClBC,EAAW,IAAIC,UACVC,OAAO,IAAKN,EAASF,GAC9BM,EAASE,OAAO,MAAO,GACvBF,EAASE,OAAO,UAAWN,EAASD,SAJd,SAKCQ,MAAM,gDAAiD,CAAEC,OAAQ,OAAQC,KAAML,IALhF,cAKhBM,EALgB,YAMtBb,EANsB,UAMEa,EAASC,OANX,+EAAH,qDAavB,OAJAC,qBAAU,WACNV,MACD,IAGC,gCACI,sBAAKW,MAAO,CAAEC,QAAS,IAAvB,UACI,iDACA,uBAAOC,KAAK,SAASC,GAAG,MAAMC,MAAOjB,EAASF,EAAGoB,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAAInB,EAAY,2BAAKD,GAAN,IAAgBF,EAAGsB,EAAEC,OAAOJ,YAC/H,qDACA,uBAAOF,KAAK,SAASC,GAAG,MAAMC,MAAOjB,EAASD,QAASmB,YAAY,gBAAgBC,SAAU,SAAAC,GAAC,OAAInB,EAAY,2BAAKD,GAAN,IAAgBD,QAASqB,EAAEC,OAAOJ,YAE/I,wBAAQK,QAASpB,EAAmBW,MAAO,CAAEU,WAAY,IAAzD,wBAEJ,cAAC,EAAD,CAAW7D,eAAgBA,QCpBxB8D,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.6af209e1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { YMaps, Map, Circle, Clusterer, Button } from 'react-yandex-maps';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst YandexMap = ({ listEarthQuake }) => {\r\n\r\n    const handleCircleSize = (depth) => {\r\n        let circleInfo = { circleSize: 100, circleColor: 100 }\r\n        switch (true) {\r\n            case depth < 4:\r\n                circleInfo = {\r\n                    circleSize: 4000,\r\n                    circleColor: \"#FFE3BF\"\r\n                }\r\n                break;\r\n            case depth < 7:\r\n                circleInfo = {\r\n                    circleSize: 8000,\r\n                    circleColor: \"#FFB321\"\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n                circleInfo = {\r\n                    circleSize: 10000,\r\n                    circleColor: \"#DA0F10\"\r\n                }\r\n                break;\r\n        }\r\n        return circleInfo\r\n    }\r\n\r\n\r\n    const renderCirclies = listEarthQuake?.map(elem => {\r\n        const circleInfo = handleCircleSize(elem.depth)\r\n        return <Circle\r\n            key={elem.eventId}\r\n            geometry={[[+elem.lat, +elem.lon], circleInfo.circleSize]}\r\n            options={{\r\n                fillColor: circleInfo.circleColor,\r\n                strokeColor: '#000000',\r\n                strokeOpacity: 0.8,\r\n                strokeWidth: 2,\r\n            }}\r\n\r\n        />\r\n    })\r\n\r\n    return (\r\n        <YMaps query={{\r\n            lang: \"en_US\"\r\n        }} >\r\n            <Map height=\"95vh\" width=\"100%\" state={{ center: [39.92077, 32.85411], zoom: 9 }} >\r\n                <Button\r\n                    options={{ maxWidth: 250 }}\r\n                    data={{ content: `Total EarthQuake: ${listEarthQuake.length + 1}` }}\r\n                    defaultState={{ selected: true }}\r\n                />\r\n                <Clusterer\r\n                    options={{ maxZoom: 6 }}\r\n                >\r\n                    {renderCirclies}\r\n                </Clusterer>\r\n            </Map>\r\n        </YMaps>\r\n    );\r\n}\r\n\r\nYandexMap.propTypes = {\r\n    listEarthQuake: PropTypes.array,\r\n};\r\n\r\nYandexMap.defaultProps = {\r\n    listEarthQuake: [],\r\n};\r\n\r\n\r\nexport default YandexMap\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport YandexMap from \"../Component/Map\";\r\n\r\nconst EarthQuakeList = () => {\r\n    const [listEarthQuake, setListEarthQuake] = useState([]);\r\n    const [listData, setListData] = useState({ m: 3, lastDay: 7 })\r\n\r\n    const fetchListFromAfad = async () => {\r\n        let formData = new FormData();\r\n        formData.append(\"m\", listData.m);\r\n        formData.append(\"utc\", 0);\r\n        formData.append(\"lastDay\", listData.lastDay);\r\n        const response = await fetch(\"https://deprem.afad.gov.tr/latestCatalogsList\", { method: \"POST\", body: formData })\r\n        setListEarthQuake(await response.json())\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchListFromAfad();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ padding: 10 }}>\r\n                <label> Min Depth: </label>\r\n                <input type=\"number\" id=\"min\" value={listData.m} placeholder=\"Min Depth\" onChange={e => setListData({ ...listData, m: e.target.value })} />\r\n                <label> From Last Day: </label>\r\n                <input type=\"number\" id=\"min\" value={listData.lastDay} placeholder=\"From Last Day\" onChange={e => setListData({ ...listData, lastDay: e.target.value })} />\r\n\r\n                <button onClick={fetchListFromAfad} style={{ marginLeft: 10}} >Search </button>\r\n            </div>\r\n            <YandexMap listEarthQuake={listEarthQuake} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default EarthQuakeList;","import React from \"react\";\nimport EarthQuakeList from \"./View/EarthQuakeList\";\n\nfunction App() {\n  return (\n    <div>\n      <EarthQuakeList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}